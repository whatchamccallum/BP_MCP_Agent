"""
Example of a custom report generator plugin for Breaking Point MCP Agent
"""

import os
from datetime import datetime
from typing import Dict, Any, Optional, cast

# Import the plugin base classes
# In a real external plugin, you would use an absolute import
import sys
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
from src.analyzer.plugins.base import ReportGenerator, TestSummary, PluginManager

class CustomReportGenerator(ReportGenerator):
    """Custom report generator that creates a simple text report"""
    
    def generate(self, summary: TestSummary, raw_results: Dict[str, Any], 
                output_format: str, output_file: str) -> str:
        """Generate a custom text report
        
        Args:
            summary: Test summary data
            raw_results: Raw test results
            output_format: Output format (txt for this plugin)
            output_file: Path to output file
            
        Returns:
            str: Path to generated report
        """
        # Only support text format
        if output_format != "txt":
            output_file = os.path.splitext(output_file)[0] + ".txt"
        
        with open(output_file, "w") as f:
            f.write("===== CUSTOM BREAKING POINT TEST REPORT =====\n\n")
            f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            # Test information
            f.write("=== TEST INFORMATION ===\n")
            f.write(f"Test Name: {summary['testName']}\n")
            f.write(f"Test ID: {summary['testId']}\n")
            f.write(f"Run ID: {summary['runId']}\n")
            f.write(f"Test Type: {summary['testType']}\n")
            f.write(f"Start Time: {summary['startTime']}\n")
            f.write(f"End Time: {summary['endTime']}\n")
            f.write(f"Duration: {summary['duration']} seconds\n")
            f.write(f"Status: {summary['status']}\n\n")
            
            # Metrics
            f.write("=== TEST METRICS ===\n")
            
            if "throughput" in summary["metrics"]:
                throughput = summary["metrics"]["throughput"]
                f.write(f"Throughput (Average): {throughput['average']} {throughput['unit']}\n")
                f.write(f"Throughput (Maximum): {throughput['maximum']} {throughput['unit']}\n")
            
            if "latency" in summary["metrics"]:
                latency = summary["metrics"]["latency"]
                f.write(f"Latency (Average): {latency['average']} {latency['unit']}\n")
                f.write(f"Latency (Maximum): {latency['maximum']} {latency['unit']}\n")
            
            if "strikes" in summary["metrics"]:
                strikes = summary["metrics"]["strikes"]
                f.write(f"Strikes Attempted: {strikes['attempted']}\n")
                f.write(f"Strikes Blocked: {strikes['blocked']}\n")
                f.write(f"Strikes Allowed: {strikes['allowed']}\n")
                f.write(f"Strike Protection Rate: {strikes['successRate']}%\n")
            
            if "transactions" in summary["metrics"]:
                transactions = summary["metrics"]["transactions"]
                f.write(f"Transactions Attempted: {transactions['attempted']}\n")
                f.write(f"Transactions Successful: {transactions['successful']}\n")
                f.write(f"Transactions Failed: {transactions['failed']}\n")
                f.write(f"Transaction Success Rate: {transactions['successRate']}%\n")
            
            # Custom conclusion
            f.write("\n=== CONCLUSION ===\n")
            f.write("This custom report was generated by the Breaking Point MCP Agent using a plugin.\n")
            
        return output_file

def register_plugins(manager: PluginManager) -> None:
    """Register plugins with the plugin manager
    
    Args:
        manager: Plugin manager instance
    """
    # Register our custom report generator
    manager.register_report_generator("custom", CustomReportGenerator())
